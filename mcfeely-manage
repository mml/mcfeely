#!/usr/bin/perl
# vi:ts=4:sw=4:sm:ai:et:

# mcfeely        Asynchronous remote task execution.
# Copyright (C) 1999 Kiva Networking
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# You may contact the maintainer at <mcfeely-maintainer@systhug.com>.

use strict;
use McFeely::Internal;
use Fcntl;
use IO::File;
use IO::Handle;
use IO::Select;
use IO::Dir;
use POSIX qw(:sys_wait_h);


$SIG{CHLD} = \&reaper;

use vars qw( $Asked_to_exit $Tasks_in_progress @Tasks %Task %Job
             $rout $rin $srr $siw $select $Srr_readbuffer);

$Srr_readbuffer = '';

$select = new IO::Select;

my $pid = shift;
my $in  = shift;
my $out = shift;

$srr = new IO::Handle;
$siw = new IO::Handle;

# our pipes to mcfeely-spawn
$srr->fdopen($in, "r")  or die "open SRR (fd $in) failed: $!\n";
$siw->fdopen($out, "w") or die "open SIW (fd $out) failed: $!\n";

$select->add($srr);

$siw->autoflush(1);
STDOUT->autoflush(1);

require 'log.pl';
require 'const.pl';
require 'chdir.pl';
require 'safe_to_exit.pl';
require 'files.pl';
require 'tasks.pl';
require 'jobs.pl';
require 'attempt_tasks.pl';
require 'do_select.pl';
require 'read_results.pl';

chdir_top() or bail("Could not chdir: $!; exiting.");
chdir 'queue' or bail("Could not chdir: $!; exiting.");

plog("starting");

scan_job('job', 0);

until ($Asked_to_exit && safe_to_exit() ) {
    scan_job('newj', 1);
    attempt_tasks();
    do_select();
    read_results();
}

plog("exiting");

# we've lost the spawner, that's not supposed to 
# happen
# XXX: if this happens mcfeely is going to quit and supervise
# XXX: we'll start it back up again. we don't want that. 
# XXX: perhaps just run without supervise? or supervise -o
sub reaper  {
    my $kid;
    $kid = waitpid($pid, WNOHANG);
    if ($kid == $pid) {
        plog("mcfeely-spawn has died for unknown reasons");
        plog("queue status unreliable");
        plog("Tasks in progress: $Tasks_in_progress");
        $Tasks_in_progress = 0;
        $Asked_to_exit = 1;
    }
}

