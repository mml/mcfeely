#!/usr/bin/perl
# vi:ts=4:sw=4:sm:ai:et:

use McFeely::Internal;
use Select;
use Fcntl;
use IO::File;

use vars qw( $Asked_to_exit $Tasks_in_progress @Tasks %Task %Job $rout $rin );

my $in = shift;
my $out = shift;

open SRR, "<&=$in" or die "open SIR (fd $in): $!\n";
$rout = $rin = '';
FD_SET(SRR, $rin);
open SIW, ">&=$out" or die "open SIW (fd $out): $!\n";
select SIW; $| = 1; select STDOUT; $| = 1;

require 'chdir.pl';
require 'const.pl';
require 'log.pl';
require 'safe_to_exit.pl';
require 'files.pl';
require 'tasks.pl';
require 'jobs.pl';
require 'attempt_tasks.pl';
require 'do_select.pl';
require 'read_results.pl';

&chdir_top or bail("Could not chdir: $!; exiting.");
chdir 'queue' or bail("Could not chdir: $!; exiting.");

plog("starting");

scan_job('job', 0);

until ($Asked_to_exit && safe_to_exit) {
    scan_job('newj', 1);
    attempt_tasks();
    do_select();
    read_results();
}

plog("exiting");
