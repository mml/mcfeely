#!/usr/bin/perl

# mcfeely        Asynchronous remote task execution.
# Copyright (C) 1999 Kiva Networking
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# You may contact the maintainer at <mcfeely-maintainer@systhug.com>.

use McFeely::Internal;

require 'chdir.pl';
require 'log.pl';

# determine what we are running as
# if we are mcfeely-qwatch we only want to produce info 
# for jobs over a certain age
my $Watcher = 0;
$Watcher = 1 if ($0 =~ /watch$/);
my $AGE_SECONDS = 3600;


# usage: files(DIRHANDLE)
# returns files like readdir, but it skips . and ..
sub files(*) {
    my $glob = shift;

    return(grep { !/^\.\.?$/ } readdir $$glob) if wantarray;
    while (defined($_ = readdir $$glob)) { return $_ unless /^\.\.?$/ }
    return undef;
}

&chdir_top or bail("Could not chdir: ", McFeely->errmsg, "; exiting.");
chdir 'queue' or bail("Could not chdir queue: $!");

sub do_task($) {
    my $num = shift;
    my @waiters;

    open TASK, "task/$num" or die "task/$num: $!\n";
    $file = join '', <TASK>;
    close TASK;
    my @file = split /\0/, $file;
    open INFO, "info/$num" or die "info/$num: $!\n";
    read(INFO, $flag, 1);
    $flag = unpack('C', $flag);
    $flag = $flag ? 'd' : 'a';
    read(INFO, $ndeps, 1);
    $ndeps = unpack('C', $ndeps);
    while (read(INFO, $waiter, 4) == 4) {
        $waiter = unpack('L', $waiter);
        push @waiters, $waiter;
    }
    close INFO;
    print " task $num ($flag$ndeps): @file\n";
    print "          waiters: @waiters\n";
}

sub scan_jobs($) {
    my $dir = shift;

    opendir JOBD, $dir or die "$dir: $!\n";

    JOB: while (defined($file = files(JOBD))) {
        open JOB, "$dir/$file" or die "$dir/$file: $!\n";
        $ctime = (stat JOB)[10];
        if ($Watcher) {
            next JOB if ($ctime < (time - $AGE_SECONDS));
        }
        $ctime = localtime $ctime;
        read(JOB, $failed, 1);
        $failed = unpack('C', $failed);
        open DESC, "desc/$file" or die "desc/$file: $!\n";
        $desc = join '', <DESC>;
        close DESC;
        open SNOT, "snot/$file" or die "snot/$file: $!\n";
        $snot = join '', <SNOT>;
        close SNOT;
        open FNOT, "fnot/$file" or die "fnot/$file: $!\n";
        $fnot = join '', <FNOT>;
        close FNOT;
        print "#$file ", ($failed ? '(failed) ' : ''), "$ctime\n",
              "        $desc  $fnot  $snot\n";
        while (read(JOB, $task, 4) == 4) {
            $task = unpack('L', $task);
            do_task $task
        }
    }
}

scan_jobs 'newj';
scan_jobs 'job';
