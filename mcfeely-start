#!/usr/bin/perl
# vi:sw=4:ts=4:wm=0:ai:sm:et

# mcfeely        Asynchronous remote task execution.
# Copyright (C) 1999 Kiva Networking
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# You may contact the maintainer at <mcfeely-maintainer@systhug.com>.

use strict;
use McFeely::Internal;
use Fcntl;
use IO::Handle;
use IO::Pipe;

require 'chdir.pl';
require 'log.pl';

chdir_top() or bail("Could not chdir: $!");

# set up the pipes on which mcfeely-manage and mcfeely-spawn
# will communicate
my $sir = new IO::Handle;
my $siw = new IO::Handle;
my $srr = new IO::Handle;
my $srw = new IO::Handle;
my $pipe1 = new IO::Pipe($sir, $siw);
my $pipe2 = new IO::Pipe($srr, $srw);

# explicit set all these things to non-blocking
# this is probably redundant
$srr->blocking(0);
$siw->blocking(0);
$srw->blocking(0);
$sir->blocking(0);

my $pid = fork();
if (!defined $pid) {
    die "cannot fork: $!\n";
} elsif ($pid == 0) {
    # child...
    $siw->close();
    $srr->close();
    $sir->fcntl(F_SETFD, 0);
    $srw->fcntl(F_SETFD, 0);
    exec 'bin/mcfeely-spawn', $sir->fileno(), $srw->fileno();

}

# parent...

$srr->fcntl(F_SETFD, 0);
$siw->fcntl(F_SETFD, 0);

$sir->close();
$srw->close();
exec 'bin/mcfeely-manage', $srr->fileno(), $siw->fileno();
