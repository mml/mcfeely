#!/usr/bin/perl
# vi:sw=4:ts=4:wm=0:ai:sm:et

# mcfeely-spawn
# version 2
# this is a rewrite to try and deal with strange file handling
# in version 1 (by mml) and 1.5 (by cdent merging Spawner.pm into
# mcfeely-spawn

# mcfeely        Asynchronous remote task execution.
# Copyright (C) 1999 Kiva Networking
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# You may contact the maintainer at <mcfeely-maintainer@systhug.com>.

# first we will just open the pipe and read from it

use strict;
use IO::Handle;
use IO::Select;
use IO::Pipe;
use POSIX qw(:signal_h :errno_h :sys_wait_h);
use Getopt::Std;

my %opt;
getopts('dT:', \%opt);

# how many times should we be willing to fork
# per time through the select loop
my $Tasks_per_select = $opt{'T'};
$Tasks_per_select    ||= 5;

# in and out are the file descriptors passed to us from mcfeely-start
my $in;
my $out;

# these pipes will be filehandles on those file descriptors
my $manage_pipe_read;
my $manage_pipe_write;

# a hande for the select loop
my $select;

# a buffer for data from mcfeely-manage
my $Manage_read_buffer;

# hashes for holding information about our children
my %Tasknum;       # the tasknumber
my %Pipehandle;    # the filehandle of the pipe they report on
my %Stat;          # the exit code
my %Msg;           # the message from the comm

# when our children die, we must reap
$SIG{'CHLD'} = \&reaper;

# get in and out from the command line
$in  = shift;
$out = shift;
die "bad arguments to start mcfeely-spawn\n"
    unless defined $out;

# do an initialization try
# these eval loops are not strictly necessary (especially here)
# but they are good practice
eval {
    # create and connect the pipes from mcfeely-manage
    $manage_pipe_read  = new IO::Handle;
    $manage_pipe_write = new IO::Handle;

    $manage_pipe_read->fdopen($in, "r") or
        die "open manage_pipe_read failed: $!";
    $manage_pipe_write->fdopen($out, "w") or
        die "open manage_pipe_write failed: $!";

    # make sure we are unbuffered where it counts
    STDOUT->autoflush(1);
    $manage_pipe_write->autoflush(1);
};
if ($@) {
    # at this stage of the game we are only going to throw
    # no catch
    die "mcfeely-spawn initialization failed: $@\n";
}

# set up the select loop
# being extra paranoid 
eval {
    $select = new IO::Select or die "creating select: $!";
    $select->add($manage_pipe_read) or die "adding to select: $!";
};
if ($@) {
    # again, no catch just yet
    die "select loop initialization failed: $@\n";
}

# now loop forever 
# inside this loop is the select loop which waits
# for data from mcfeely-manage
while (1) {

    # for reading and storing data from mcfeely-manage
    my $line;
    my @lines;
    my $stage;
    my $buf;
    my $ok;
    my @ready_to_read; # XXX: this is probably not necessary, 

    # for dealing with getting information from children
    my $pid;
    my $oldsigset;
    my $sig_chld_set;
    $sig_chld_set = POSIX::SigSet->new(&POSIX::SIGCHLD);
    $oldsigset    = POSIX::SigSet->new;

    # wait ten seconds or until the mcfeely-manage pipe
    # had data
    @ready_to_read = $select->can_read(10);

    # once we've decided to fall out of the select, let's go
    # ahead and block CHLD signals about children
    sigprocmask(SIG_BLOCK, $sig_chld_set, $oldsigset);

    # prepare any buffered data we might have
    $stage = $Manage_read_buffer;

    # check to see if there is a filehandle with data 
    # or if we just fell through
    if (scalar @ready_to_read > 0) {
        # we have data

        # read it in
        eval {
            $stage .= $buf while
                (defined($ok = $manage_pipe_read->read($buf, 1024))
                    and $ok > 0);
            #if (defined($!) && $! != &POSIX::EWOULDBLOCK) {
            if (defined($!) && $! != EWOULDBLOCK) {
                die "read error: $!";
            }
        };
        if ($@) {
            die "error getting data from mcfeely-manage: $@\n";
        }
    }


    # make sure this is an empty lis
    # we'll be looping on it in moments.
    @lines = ();

    # Adrian Hosey did some real live testing to determine
    # that this is a shorter faster loop than the way it was done
    # before
    if (length($stage) != 0) {
        my $task_input_counter = 0;
        while (length($stage) != 0 &&
                $task_input_counter++ < $Tasks_per_select) {
            last if ($stage !~ /\n/);
            $stage =~ s/^.*\n//;
            push(@lines, $&);
        }
    }
    # add any leftover $stage to the $Manager_read_buffer
    $Manage_read_buffer = $stage;

    # do stuff with the lines
    foreach $line (@lines) {
        # get rid of line feed
        chomp($line);

        print STDERR "mcfeely-spawn: processing $line\n" if $opt{'d'};

        # go into the fork sub
        # put this in an eval so that any dies in there
        # we can deal with
        eval {
           process_manage_line($line);
        };
        if ($@) {
            if ($@ =~ /^child: /) {
                print STDOUT "child started but: $@\n";
                exit 99;
            } elsif ($@ = /^filehandles: /) {
                # this is probably _not_ the way to do this
                # but I can't think of another way to do it
                # we want to slow things down, let's do it
                # the hard way
                print STDERR
                    "mcfeely-spawn: filehandle issues going to sleep\n"
                        if $opt{'d'};
                sleep 10;
                soft($line, "process_manage_line: $@");
                next;
            } else {
                soft($line, "process_manage_line: $@");
                next;
            }
        }

    }
    # deal with results that were gathered by the reaper
    # stop block CHLD
    sigprocmask(SIG_UNBLOCK, $sig_chld_set, $oldsigset);
    foreach $pid (keys(%Stat)) {
        my $results = create_results( 'task' => $Tasknum{$pid},
                                      'status' => $Stat{$pid},
                                      'msg'    => $Msg{$pid});
        # print out the data or skip to the next one
        if ($manage_pipe_write->print($results)) {
            delete $Tasknum{$pid};
            delete $Stat{$pid};
            delete $Msg{$pid};
        } else {
            next;
        }
    }
                                                 
}

sub create_results {
    my %args = @_;

    # tack a \0 on the end of message so we can have multi
    # line reports
    $args{msg} .= "\0";
    # Tack an end-of-transmission at the end of msg.
    $args{msg} .= pack 'c', 0x4;

    return("$args{task}\0$args{status}\0$args{msg}");
}



sub process_manage_line {
    my $tasknum = shift;
    my $pid;

    # create the pipe
    # IO::Handle does some weird shit sometimes so we need
    # to catch death here
    my $read_pipe  = new IO::Handle ||
        die "filehandles: unable to create read_pipe: $!";
    my $write_pipe = new IO::Handle ||
        die "filehandles: unable to create write_pipe: $!";
    
    my $pipe1      = new IO::Pipe($read_pipe, $write_pipe);
    if (!defined($pipe1)) {
        die "filehandles: unable to create pipe1: $!";
    }

    # fork fork fork
    if (!defined( $pid = fork() )) {
        die "unable to fork: $!";
    } elsif ($pid == 0) {
        # I'm the kid
        # dup STDOUT onto a pipe that we are going to associate
        # with this kid
        my $write_pipe_no = $write_pipe->fileno() || die
            "child: can't get fileno() of write_pipe: $!";
        open(STDOUT, ">& $write_pipe_no") || die
            "child: unable to dup write_pipe to STDOUT: $!";
        # close the pipes to mcfeely-manage
        $manage_pipe_read->close() || die
            "child: trouble closing the manage_pipe_read: $!";
        $manage_pipe_write->close() || die
            "child: trouble closing the manage_pipe_write: $!";
        # open STDIN as the task
        open(STDIN, "queue/task/$tasknum") || die
            "child: trouble openning queue/task/$tasknum: $!";
        # and exec
        #close STDERR;
        exec 'bin/mcfeely-ttpc', $tasknum || die
            "child: unable to launch mcfeely-ttpc: $!";
    } else {
        # parent
        # close the write pipe and record some info
        # for later reaping
        $write_pipe->close();
        $Tasknum{$pid}    = $tasknum;
        $Pipehandle{$pid} = $read_pipe;
    }
}

sub reaper {
    my $baby;
    my $fh;
    my $read_count;

    while (($baby = waitpid(-1, WNOHANG)) > 0) {

        if (exists($Pipehandle{$baby})) {
            my $buf;

            print STDERR "mcfeely-spawn: $Tasknum{$baby} responding\n"
                if $opt{'d'};

            $fh = $Pipehandle{$baby};

            # get the exit code
            $Stat{$baby} = ($? >> 8);

            # read the report from the child
            $fh->blocking(1);
            $read_count = $fh->read($buf, 1024);

            if (!defined($read_count)) {
                # something went wrong during the read
                delete $Pipehandle{$baby};
                $fh->close();
                hard($Tasknum{$baby}, "bad read from ttpc: $!");
            } elsif ($read_count == 0) {
                # the other end is not there, this is unexpected
                delete $Pipehandle{$baby};
                $fh->close();
                hard($Tasknum{$baby}, "EOF on read from ttpc");
            } else {
                # cool, store the mesage
                $Msg{$baby} = "$buf";
                delete $Pipehandle{$baby};
                $fh->close();
            }
        } 
        # else we got a child that we don't know about, odd
    }
}

sub soft {
    my $task   = shift;
    my $status = 99;
    hardsoft_error($task, $status, @_);
}

sub hard {
    my $task   = shift;
    my $status = 100;
    print STDERR "doing a hard for $task: @_\n" if $opt{'d'};
    hardsoft_error($task, $status, @_);
}

sub hardsoft_error {
    my $task   = shift;
    my $status = shift;
    my $msg    = join('', @_);

    # make an end of transmission message
    $msg       .= "\0";
    $msg       .= pack 'c', 0x4;


    # send it down the pipe
    $manage_pipe_write->print("$task\0$status\0$msg") ||
        die "can't write hardsoft_error to mcfeely-manage: $!\n";

    # XXX: but do we exit here? no, I guess not, we should
    # only exit when we want to DIE
    return;
}
